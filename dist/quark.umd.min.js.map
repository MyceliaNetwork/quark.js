{"version":3,"file":"quark.umd.min.js","sources":["../index.js"],"sourcesContent":["let quarkWindow\nlet basket = []\nconst ALLOWED_AUTH_PROVIDERS = [\"ii\"]\nconst ALLOWED_VALUE_TYPES = [\"ICP\"]\n\n/**\n * NotifyObject\n *\n * Used to produce a Candid func that is called when the checkout\n * has been confirmed on the Quark website. From there on out it is\n * up to the integrator to process all the bought items by the end-user.\n *\n * More info:\n * https://smartcontracts.org/docs/candid-guide/candid-types.html#type-func\n *\n * @typedef {Object} NotifyObject\n * @property {string} principalId the ID of the integrator's canister\n * @property {string} methodName the name of the exposed method\n */\n\n/**\n * InitConfig\n *\n * A valid config to initialize Quark on the integrator's website.\n * @typedef {Object} InitConfig\n * @property {string} authProvider - Used to ensure the correct\n * auth mechanism when the user is redirected to the Quark website\n * to proceed the checkout.\n * @property {string} integrator - A canister ID where the funds will\n * be sent to upon a successful checkout\n * @property {string} domain - The domain of the Quark website\n * @property {NotifyObject} - An exposed canister method that\n * belongs to the integrator that is called when Quark successfully\n * confirms the checkout.\n */\n\n/**\n * initializeQuark - Initialize quark.js\n *\n * When called the configuration passed as a parameter is first\n * validated. When validated, we're attaching an eventListener\n * to the window scope. The eventListener will execute a handler\n * upon receiving an incoming message. When this message comes from\n * the Quark website it will execute code to ensure communication\n * between quark.js and the Quark website.\n *\n * There are two types of incoming messages on the quark.js-side:\n * - `checkoutLoaded`: this message will be dispatched once the Quark\n * checkout page was opened in another tab. Upon receiving this\n * message we will send all the necessary data to the opened tab,\n * such as `basket`, `integrator`, etc. using a window.postMessage\n * MessageEvent with the type \"basketUpdate\".\n * - `checkoutComplete`: this is sent to our listener when the user\n * has confirmed the checkout on the Quark website. Upon receiving\n * a message with this type, we will call the `callback` Function\n * that the user passed inside the init() config and it's up to\n * the integrator to take it from there.\n *\n * Also, there is one type of outgoing message going from the\n * quark.js-side to the Quark-side:\n * - `basketUpdate`: When opened in the end-user's browser, the\n * Checkout page on the Quark website will listen for this\n * particular message to update the contents of the checkout\n * and calculate the total sum of the transaction to display\n * this to the user to confirm.\n *\n * checkout(basket);\n *\n * @param {InitConfig} config\n * @returns {void}\n */\nfunction initializeQuark(config) {\n  validateConfig(config)\n  window.addEventListener(\n    \"message\",\n    function (event) {\n      if (event.origin !== config.domain) return // DANGER ZONE\n      if (![\"checkoutLoaded\", \"checkoutComplete\"].includes(event.data.type))\n        return\n      if (event.data.type === \"checkoutLoaded\") {\n        const message = JSON.parse(\n          JSON.stringify({\n            type: \"basketUpdate\",\n            basket,\n            origin,\n            notify: config.notify,\n            integrator: config.integrator,\n            authProvider: config.authProvider,\n          }),\n        )\n        quarkWindow.postMessage(message, config.domain)\n      } else if (event.data.type === \"checkoutComplete\") {\n        config.callback(event.data)\n      }\n    },\n    false,\n  )\n\n  /**\n   * getTotal - Utility Function to calculate the total sum of checkout items\n   *\n   * @param {Array.<BasketItem>} basket\n   * @returns {number}\n   */\n  function getTotal(basket = []) {\n    let total = 0\n    basket.forEach(v => (total += Number(v.value)))\n    return total\n  }\n\n  /**\n   * validateConfig - Utility Function to validate the `config` param init()\n   *\n   * @param {InitConfig} config\n   * @returns {void}\n   */\n  function validateConfig(config) {\n    if (!config.integrator)\n      throw new Error(\"The field `integrator` is required\")\n    if (!config.domain) throw new Error(\"The field `domain` is required\")\n    if (!config.notify) throw new Error(\"The field `notify` is required\")\n    if (!config.authProvider)\n      throw new Error(\"The field `authProvider` is required\")\n    if (typeof config.integrator !== \"string\")\n      throw new Error(\"The field `integrator` must be of type 'string'\")\n    if (typeof config.domain !== \"string\")\n      throw new Error(\"The field `domain` must be of type 'string'\")\n    if (typeof config.authProvider !== \"string\")\n      throw new Error(\"The field `authProvider` must be of type 'string'\")\n    if (typeof config.notify !== \"object\")\n      throw new Error(\"The field `notify` must be of type 'object'\")\n    if (!config.notify.principalId || !config.notify.methodName)\n      throw new Error(\n        \"The field `notify` must have two properties: `principalId` and `methodName`\",\n      )\n    if (!config.notify.principalId)\n      throw new Error(\n        \"The field `notify` requires a field called `principalId`\",\n      )\n    if (typeof config.notify.principalId !== \"string\")\n      throw new Error(\"The field `notify.principalId` must be of type 'string'\")\n    if (!config.notify.methodName)\n      throw new Error(\"The field `notify` requires a field called `methodName`\")\n    if (typeof config.notify.methodName !== \"string\")\n      throw new Error(\"The field `notify.methodName` must be of type 'string'\")\n    if (!ALLOWED_AUTH_PROVIDERS.includes(config.authProvider))\n      throw new Error(\n        \"The field `authProvider` must be one of: \" +\n          ALLOWED_AUTH_PROVIDERS.join(\", \"),\n      )\n  }\n\n  /**\n   * A BasketItem is used to display the checkout confirmation to\n   * the user on the Quark-side and to calculate the total sum of\n   * the transaction.\n   *\n   * @typedef {Object} BasketItem\n   * @property {string} name the basket item name. e.g. \"Spoon\"\n   * @property {string} [description] An optional item description\n   * @property {number} value the value of the basket item as an\n   * e8s value. e.g. 10000000 for 1 ICP\n   * @property {string} token The currency used for the checkout.\n   * e.g. \"ICP\"\n   */\n\n  /**\n   * validateBasket -Utility Function to ensure a correct\n   * implementation of quark.js' basket.\n   *\n   * @param {Array.<BasketItem>} basket Array with BasketItems\n   * @returns {boolean} the validation result\n   */\n  function validateBasket(basket = []) {\n    if (!Array.isArray(basket)) {\n      throw new Error(\"The field `basket` must be an array\")\n    }\n    if (!basket.length) {\n      throw new Error(\"You should provide at least one item to check-out\")\n    }\n    const hasValidBasket = basket.every(item => {\n      if (!item.name) throw new Error(\"The field `name` is required\")\n      if (!item.value && item.value !== 0)\n        throw new Error(\"The field `value` is required\")\n      if (!item.token) throw new Error(\"The field `token` is required\")\n      if (typeof item.name !== \"string\")\n        throw new Error(\"The field `name` must be of type 'string'\")\n      if (typeof item.value !== \"number\")\n        throw new Error(\"The field `value` must be of type 'number'\")\n      if (typeof item.token !== \"string\")\n        throw new Error(\"The field `token` must be of type 'string'\")\n      if (!ALLOWED_VALUE_TYPES.includes(item.token))\n        throw new Error(\n          \"The field `token` must be one of: \" + ALLOWED_VALUE_TYPES.join(\", \"),\n        )\n      if (item.description && typeof item.description !== \"string\") {\n        throw new Error(\"The field `description` must be of type 'string'\")\n      }\n      return true\n    })\n    const total = getTotal(basket)\n    const hasValidAmount = total > 0\n    return hasValidBasket && hasValidAmount\n  }\n\n  /**\n   * checkout - Open Quark website to confirm checkout\n   *\n   * After quark.js is properly configured, the integrator\n   * can call this Function to open a new browser window to\n   * the Quark website to let the user confirm the transfer.\n   *\n   * @param {Object} data\n   * @returns {void}\n   */\n  function checkout(data) {\n    if (!validateBasket(data)) return\n    basket = data\n    const queryString = JSON.stringify({\n      origin: window.origin,\n      authProvider: config.authProvider,\n    })\n    quarkWindow = window.open(\n      `${config.domain}/checkout?data=${btoa(queryString)}`,\n      \"_blank\",\n    )\n  }\n\n  return {\n    checkout,\n  }\n}\n\nexport default initializeQuark\n"],"names":["quarkWindow","basket","ALLOWED_AUTH_PROVIDERS","ALLOWED_VALUE_TYPES","config","validateBasket","Array","isArray","Error","length","hasValidBasket","every","item","name","value","token","includes","join","description","total","forEach","v","Number","getTotal","integrator","domain","notify","authProvider","principalId","methodName","validateConfig","window","addEventListener","event","origin","data","type","message","JSON","parse","stringify","postMessage","callback","checkout","queryString","open","btoa"],"mappings":"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"}