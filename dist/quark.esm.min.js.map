{"version":3,"file":"quark.esm.min.js","sources":["../src/checkout.ts","../src/initialize.ts"],"sourcesContent":["/**\n * checkout - Open Quark website to confirm checkout\n *\n * After quark.js is properly configured, the integrator\n * can call the `checkout` Function returned by this\n * higher order Function to open a new browser window to\n * the Quark website to let the user confirm the transfer.\n */\n\nimport { type CreateCheckoutArgs, type Checkout, type Basket } from \"./schemas\"\n\nfunction createCheckout({\n  domain,\n  provider,\n  closure,\n}: CreateCheckoutArgs): Checkout {\n  return function checkout(b: Basket): boolean {\n    // TODO: validate in outside module to separate validation from logic\n    // if (!validateBasket(data)) return\n    closure.basket = b\n    const queryString = JSON.stringify({\n      origin: window.origin,\n      provider,\n    })\n    closure.window = window.open(\n      `${domain}/checkout?data=${btoa(queryString)}`,\n      \"_blank\",\n    )\n    return true\n  }\n}\n\nexport { createCheckout }\n","/**\n * initialize - Initialize quark.js\n *\n * When called the configuration passed as a parameter is first\n * validated. When validated, we're attaching an eventListener\n * to the window scope. The eventListener will execute a handler\n * upon receiving an incoming message. When this message comes from\n * the Quark website it will execute code to ensure communication\n * between quark.js and the Quark website.\n *\n * There are two types of incoming messages on the quark.js-side:\n * - `checkoutLoaded`: this message will be dispatched once the Quark\n * checkout page was opened in another tab. Upon receiving this\n * message we will send all the necessary data to the opened tab,\n * such as `basket`, `integrator`, etc. using a window.postMessage\n * MessageEvent with the type \"basketUpdate\".\n * - `checkoutComplete`: this is sent to our listener when the user\n * has confirmed the checkout on the Quark website. Upon receiving\n * a message with this type, we will call the `callback` Function\n * that the user passed inside the init() config and it's up to\n * the integrator to take it from there.\n *\n * Also, there is one type of outgoing message going from the\n * quark.js-side to the Quark-side:\n * - `basketUpdate`: When opened in the end-user's browser, the\n * Checkout page on the Quark website will listen for this\n * particular message to update the contents of the checkout\n * and calculate the total sum of the transaction to display\n * this to the user to confirm.\n *\n * checkout(basket);\n **/\n\nimport { createCheckout } from \"./checkout\"\nimport { type Config, type Checkout } from \"./schemas\"\n\nexport function initialize(config: Config): Checkout {\n  // higher order variables that get assigned upon checkout\n  const closure = {\n    window: undefined,\n    basket: [],\n  }\n\n  window.addEventListener(\n    \"message\",\n    function (event) {\n      if (event.origin !== config.domain) return // DANGER ZONE\n      if (![\"checkoutLoaded\", \"checkoutComplete\"].includes(event.data.type))\n        return\n      if (event.data.type === \"checkoutLoaded\") {\n        const message = JSON.parse(\n          JSON.stringify({\n            type: \"basketUpdate\",\n            origin,\n            basket: closure.basket,\n            notify: config.notify,\n            integrator: config.integrator,\n            provider: config.provider,\n          }),\n        )\n        closure.window.postMessage(message, config.domain)\n      } else if (event.data.type === \"checkoutComplete\") {\n        config.callback(event.data)\n      }\n    },\n    false,\n  )\n  const { provider, domain } = config\n  return createCheckout({ provider, domain, closure })\n}\n"],"names":[],"mappings":"AAAA;;;;;;;AAOG;AAIH,SAAS,cAAc,CAAC,EACtB,MAAM,EACN,QAAQ,EACR,OAAO,GACY,EAAA;IACnB,OAAO,SAAS,QAAQ,CAAC,CAAS,EAAA;;;AAGhC,QAAA,OAAO,CAAC,MAAM,GAAG,CAAC,CAAA;AAClB,QAAA,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC;YACjC,MAAM,EAAE,MAAM,CAAC,MAAM;YACrB,QAAQ;AACT,SAAA,CAAC,CAAA;AACF,QAAA,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC,IAAI,CAC1B,CAAG,EAAA,MAAM,CAAkB,eAAA,EAAA,IAAI,CAAC,WAAW,CAAC,EAAE,EAC9C,QAAQ,CACT,CAAA;AACD,QAAA,OAAO,IAAI,CAAA;AACb,KAAC,CAAA;AACH;;AC9BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BI;AAKE,SAAU,UAAU,CAAC,MAAc,EAAA;;AAEvC,IAAA,MAAM,OAAO,GAAG;AACd,QAAA,MAAM,EAAE,SAAS;AACjB,QAAA,MAAM,EAAE,EAAE;KACX,CAAA;AAED,IAAA,MAAM,CAAC,gBAAgB,CACrB,SAAS,EACT,UAAU,KAAK,EAAA;AACb,QAAA,IAAI,KAAK,CAAC,MAAM,KAAK,MAAM,CAAC,MAAM;AAAE,YAAA,OAAM;AAC1C,QAAA,IAAI,CAAC,CAAC,gBAAgB,EAAE,kBAAkB,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;YACnE,OAAM;AACR,QAAA,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,KAAK,gBAAgB,EAAE;YACxC,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CACxB,IAAI,CAAC,SAAS,CAAC;AACb,gBAAA,IAAI,EAAE,cAAc;gBACpB,MAAM;gBACN,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,MAAM,EAAE,MAAM,CAAC,MAAM;gBACrB,UAAU,EAAE,MAAM,CAAC,UAAU;gBAC7B,QAAQ,EAAE,MAAM,CAAC,QAAQ;AAC1B,aAAA,CAAC,CACH,CAAA;YACD,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,CAAA;AACnD,SAAA;AAAM,aAAA,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,KAAK,kBAAkB,EAAE;AACjD,YAAA,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;AAC5B,SAAA;KACF,EACD,KAAK,CACN,CAAA;AACD,IAAA,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,MAAM,CAAA;IACnC,OAAO,cAAc,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,CAAA;AACtD;;;;"}