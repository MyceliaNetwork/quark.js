(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.quark = {}));
})(this, (function (exports) { 'use strict';

    /**
     * checkout - Open Quark website to confirm checkout
     *
     * After quark.js is properly configured, the integrator
     * can call the `checkout` Function returned by this
     * higher order Function to open a new browser window to
     * the Quark website to let the user confirm the transfer.
     */
    function createCheckout({ domain, provider, x, }) {
        return function checkout(b) {
            // TODO: validate in outside module to separate validation from logic
            // if (!validateBasket(data)) return
            console.log("ðŸš€ ~ file: checkout.ts:22 ~ checkout ~ b", b);
            x.basket = b;
            console.log("ðŸš€ ~ file: checkout.ts:23 ~ checkout ~ basket", x.basket);
            const queryString = JSON.stringify({
                origin: window.origin,
                provider: provider,
            });
            x.windowObject = window.open(`${domain}/checkout?data=${btoa(queryString)}`, "_blank");
            console.log("ðŸš€ ~ file: checkout.ts:28 ~ checkout ~ windowObject", x.windowObject);
            return x.basket;
        };
    }

    function initialize(config) {
        // higher order variables that will get assigned upon checkout
        const x = {
            windowObject: undefined,
            basket: [],
        };
        window.addEventListener("message", function (event) {
            console.log("ðŸš€ ~ file: initialize.ts:33 ~ initialize ~ event", event);
            if (event.origin !== config.domain)
                return; // DANGER ZONE
            if (!["checkoutLoaded", "checkoutComplete"].includes(event.data.type))
                return;
            if (event.data.type === "checkoutLoaded") {
                const message = JSON.parse(JSON.stringify({
                    type: "basketUpdate",
                    origin,
                    basket: x.basket,
                    notify: config.notify,
                    integrator: config.integrator,
                    provider: config.provider,
                }));
                console.log("ðŸš€ ~ file: initialize.ts:23 ~ initialize ~ message", message);
                x.windowObject.postMessage(message, config.domain);
            }
            else if (event.data.type === "checkoutComplete") {
                config.callback(event.data);
            }
        }, false);
        const { provider, domain } = config;
        return createCheckout({ provider, domain, x });
    }

    exports.initialize = initialize;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=quark.umd.min.js.map
