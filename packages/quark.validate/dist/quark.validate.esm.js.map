{"version":3,"file":"quark.validate.esm.js","sources":["../../../src/schemas.ts","../index.ts"],"sourcesContent":["import { z } from \"zod\"\nimport { Principal as P } from \"@dfinity/principal\"\n\n// TODO: use Principal type\nconst validatePrincipal = (p: any) => {\n  try {\n    return p === P.fromText(p).toText()\n  } catch (e) {\n    return false\n  }\n}\n\nconst DESCRIPTION = {\n  PROVIDER:\n    \"This can be either a wallet or an identity provider. The user will only be able to connect with this provider on Quark's Checkout page\",\n  INTEGRATOR:\n    \"The Quark Address of the integrator. This address will receive the payment upon a successful checkout\",\n  NOTIFY: {\n    PRINCIPAL_ID:\n      \"The Principal ID of the canister that receives the callback from Quark to notify the payment result\",\n    METHOD:\n      \"The name of the canister method that is called from Quark to notify the payment result\",\n  },\n  BAKSET: {\n    NAME: \"The name of the basket item.\",\n    DESCRIPTION: \"Optional description of the basket item.\",\n  },\n}\n\nconst II = z.literal(\"ii\", { description: \"Internet Identity\" })\nconst NFID = z.literal(\"nfid\", { description: \"Non-Fungible Identity\" })\nconst PLUG = z.literal(\"plug\", { description: \"Plug wallet\" })\nconst PROVIDERS = [II, NFID, PLUG]\n\nconst printProviders = () => PROVIDERS.map(p => p.value).join(\", \")\nconst Provider = z.union([II, NFID, PLUG], {\n  description: DESCRIPTION.PROVIDER,\n  invalid_type_error: \"Invalid provider\",\n  required_error: `Config.provider is required. Expected Provider as String. Choose between: ${printProviders()}`,\n})\n\nconst Integrator = z\n  .string({\n    description: DESCRIPTION.INTEGRATOR,\n    invalid_type_error: \"Invalid integrator. Expected Principal ID as String\",\n    required_error: \"Config.integrator is required\",\n  })\n  .uuid({ message: \"Invalid Principal ID\" })\n\nconst Domain = z\n  .string({\n    description: \"The domain of the Quark website\",\n    required_error: \"Config.domain is required\",\n  })\n  .url({ message: \"Invalid url\" })\n  .startsWith(\"https://\", { message: \"Must provide secure URL\" })\n  .endsWith(\".ic0.app\", { message: \"Only .ic0.app domains allowed\" })\n\n// .args() is `MessageEvent.data`\n// See: https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/data\nconst Callback = z.function().args(z.any()).returns(z.any())\n\n/**\n * Notify\n *\n * Used to produce a Candid func that is called when the checkout\n * has been confirmed on the Quark website. From there on out it is\n * up to the integrator to process all the bought items by the end-user.\n *\n * More info:\n * https://smartcontracts.org/docs/candid-guide/candid-types.html#type-func\n */\n\nconst Principal = z\n  .string({\n    description: DESCRIPTION.NOTIFY.PRINCIPAL_ID,\n    required_error: \"Config.notify.principalId is required\",\n  })\n  .uuid({ message: \"Invalid Principal ID\" })\n\nconst MethodName = z.string({\n  description: DESCRIPTION.NOTIFY.METHOD,\n  required_error: \"Config.notify.method is required\",\n})\nconst Notify = z\n  .object({\n    principalId: Principal,\n    methodName: MethodName,\n  })\n  .required()\n  .strict()\n\n/**\n * Config\n *\n * A config to initialize Quark on the integrator's website.\n */\nexport const Config = z\n  .object({\n    provider: Provider,\n    integrator: Integrator,\n    domain: Domain,\n    callback: Callback,\n    notify: Notify,\n  })\n  .required()\n  .strict()\n\nexport type Config = z.infer<typeof Config>\n\n/**\n * Tokens\n */\nconst TEST = z.literal(\"TEST\", {\n  description: \"Quark Test Token. Used for development on testnets\",\n})\nconst ICP = z.literal(\"ICP\", {\n  description: \"Internet Computer Token. Used for production on mainnet\",\n})\nconst TOKENS = [TEST, ICP]\n\n/**\n * BasketItem\n */\n\nconst Name = z\n  .string({\n    description: DESCRIPTION.BAKSET.NAME,\n    required_error: \"Basket.name is required\",\n  })\n  .min(1, { message: \"Basket.name must be at least 1 character long\" })\n  .max(100, { message: \"Basket.name must be at most 100 characters long\" })\nconst Description = z\n  .string({\n    description: DESCRIPTION.BAKSET.DESCRIPTION,\n  })\n  .min(1, { message: \"Basket.description must be at least 1 character long\" })\n  .max(100, {\n    message: \"Basket.description must be at most 100 characters long\",\n  })\nconst Value = z\n  .number({\n    description: \"Number of tokens to pay for this Basket item.\",\n    invalid_type_error: \"Invalid Basket.value Type. Expected Number\",\n    required_error: \"Basket.value is required\",\n  })\n  .min(1, { message: \"Basket.value must be at least 1\" })\n\nconst Token = z.union([TEST, ICP], {\n  description: \"Type of token used to pay for this Basket item.\",\n  invalid_type_error: \"Invalid Basket.token Type. Expected String\",\n  required_error: \"Basket.token is required\",\n})\n\n/**\n * Basket\n *\n * The basket is an array of items that the end-user has selected to pay for.\n * The name, description and price of each item is shown on the Quark website\n * upon Checkout.\n */\n\nconst BasketItem = z\n  .object({\n    name: Name,\n    description: Description.optional(),\n    value: Value,\n    token: Token,\n  })\n  .required()\nexport const Basket = BasketItem.array()\nexport type Basket = z.infer<typeof Basket>\n\n/**\n * Checkout\n */\n\nconst Checkout = z.function().args(Basket).returns(z.boolean())\nexport type Checkout = z.infer<typeof Checkout>\n\n/**\n * Because the `basket` and `window` can only be assigned by the user's browser, we need to\n * use a closure to create a Checkout function with all necessary values to send to the Quark window.\n */\n\nconst Closure = z.object({\n  window: z.any(),\n  basket: Basket.optional(),\n})\nexport type Closure = {\n  window?: Window\n  basket?: Basket\n}\n\n/**\n * CreateCheckout\n *\n * Used to produce a Function that can be implemented by the integrator how they see fit.\n * The user will most likely call this function when the user clicks a \"Pay\" button.\n */\n\nconst CreateCheckoutConfig = z\n  .object({\n    provider: Provider,\n    domain: Domain,\n    closure: Closure,\n  })\n  .required()\n  .strict()\nexport type CreateCheckoutConfig = z.infer<typeof CreateCheckoutConfig>\n\nconst CreateCheckout = z.function().args(CreateCheckoutConfig).returns(Checkout)\nexport type CreateCheckout = z.infer<typeof CreateCheckout>\n","/**\n * validate - Validate quark config and basket\n *\n * Please delete package when validated.\n *\n * This package helps you use correctly setup your quark integration.\n * By calling this function you can validate your Quark config and\n * basket data during run-time.\n */\nimport { Config, Basket } from \"../../src/schemas\"\n\nfunction config(c: Config) {\n  const r = Config.parse(c)\n  console.log(\"ðŸš€ ~ file: validate.ts:5 ~ config ~ r\", r)\n  return r\n}\n\nfunction basket(b: Basket) {\n  const r = Basket.parse(b)\n  console.log(\"ðŸš€ ~ file: validate.ts:5 ~ config ~ r\", r)\n  return r\n}\n\nconst validate = { config, basket }\nexport { validate }\n"],"names":[],"mappings":"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"}