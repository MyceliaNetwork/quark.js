{"version":3,"file":"quark-checkout.umd.js","sources":["../checkout.ts","../index.ts"],"sourcesContent":["/**\n * checkout - Open Quark website to confirm checkout\n *\n * After quark-checkout is properly configured, the integrator\n * can call the `checkout` Function returned by this\n * higher order Function to open a new browser window to\n * the Quark website to let the user confirm the transfer.\n */\n\nimport {\n  type Basket,\n  type Checkout,\n  type CreateCheckoutConfig,\n} from \"../../src/schemas\"\n\nfunction createCheckout(config: CreateCheckoutConfig): Checkout {\n  const { closure, domain, provider } = config\n  return function checkout(b: Basket): boolean {\n    // By assiging the user's Basket value to the closure, the\n    // `checkoutEventHandler` will be able to access its value\n    // once it is receiving the `checkoutLoaded` EventMessage\n    // sent by Quark, so that it can update the Quark Checkout\n    // page with the basket content.\n    closure.basket = b\n    const origin = window.origin\n    const queryString = JSON.stringify({ origin, provider })\n    closure.window = window.open(\n      `${domain}/checkout?data=${window.btoa(queryString)}`,\n      \"_blank\",\n    )\n    return true\n  }\n}\n\nexport { createCheckout }\n","/**\n * initialize - Initialize integrator script\n *\n * When called we assume the config passed is valid. To ensure\n * validity we provide the `quark.validate` script to validate\n * the config and basket before passing them to the `initialize`\n * and `checkout` functions. Upon calling `initialize` we are\n * attaching an EventListener to the window scope. The EventListener\n * will execute a handler `checkoutEventHandler` that will listen\n * to incoming messages. The `initialize` function returns a\n * `checkout` function. When called it opens Quark in a new window.\n * Once the window opens it will send a message to the EventListener\n * that is running in the scope of `initialize` and the handler.\n * When it's called with a `event.data.type` of `checkoutLoaded`,\n * the handler will transfer the basket data to the opened Quark window.\n *\n * There are two types of incoming messages on the integrator-side:\n * - `checkoutLoaded`: this message will be dispatched once the Quark\n * checkout page was opened in another tab. Upon receiving this\n * message we will send all the necessary data to the opened tab,\n * such as `basket`, `integrator`, etc. using a window.postMessage\n * MessageEvent with the type \"basketUpdate\".\n * - `checkoutComplete`: this is sent to our listener when the user\n * has confirmed the checkout on the Quark website. Upon receiving\n * a message with this type, we will call the `callback` Function\n * that the user passed inside the init() config and it's up to\n * the integrator to take it from there.\n *\n * Also, there is one type of outgoing message going from the\n * integrator-side to the Quark-side:\n * - `basketUpdate`: When opened in the end-user's browser, the\n * Checkout page on the Quark website will listen for this\n * particular message to update the contents of the checkout\n * and calculate the total sum of the transaction to display\n * this to the user to confirm.\n *\n * checkout(basket);\n **/\n\nimport { createCheckout } from \"./checkout\"\nimport { type Config, type Checkout, type Closure } from \"../../src/schemas\"\n\nexport function initialize(config: Config): Checkout {\n  // higher order variables that get assigned upon checkout\n  const closure: Closure = {\n    window: undefined,\n    basket: [],\n  }\n\n  window.addEventListener(\n    \"message\",\n    function checkoutEventHandler(event) {\n      if (event.origin !== config.domain) return // DANGER ZONE\n      if (![\"checkoutLoaded\", \"checkoutComplete\"].includes(event.data.type))\n        return\n      if (event.data.type === \"checkoutLoaded\") {\n        const message = JSON.parse(\n          JSON.stringify({\n            type: \"basketUpdate\",\n            origin: window.origin,\n            basket: closure.basket,\n            notify: config.notify,\n            integrator: config.integrator,\n            provider: config.provider,\n          }),\n        )\n        closure.window?.postMessage(message, config.domain)\n      } else if (event.data.type === \"checkoutComplete\") {\n        config.callback(event.data)\n      }\n    },\n    false,\n  )\n  const { provider, domain } = config\n  return createCheckout({ provider, domain, closure })\n}\n"],"names":[],"mappings":";;;;;;IAAA;;;;;;;IAOG;IAQH,SAAS,cAAc,CAAC,MAA4B,EAAA;QAClD,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,CAAA;QAC5C,OAAO,SAAS,QAAQ,CAAC,CAAS,EAAA;;;;;;IAMhC,QAAA,OAAO,CAAC,MAAM,GAAG,CAAC,CAAA;IAClB,QAAA,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAA;IAC5B,QAAA,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAA;YACxD,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC,IAAI,CAC1B,GAAG,MAAM,CAAA,eAAA,EAAkB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,EACrD,QAAQ,CACT,CAAA;IACD,QAAA,OAAO,IAAI,CAAA;IACb,KAAC,CAAA;IACH;;IChCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAqCI;IAKE,SAAU,UAAU,CAAC,MAAc,EAAA;;IAEvC,IAAA,MAAM,OAAO,GAAY;IACvB,QAAA,MAAM,EAAE,SAAS;IACjB,QAAA,MAAM,EAAE,EAAE;SACX,CAAA;QAED,MAAM,CAAC,gBAAgB,CACrB,SAAS,EACT,SAAS,oBAAoB,CAAC,KAAK,EAAA;;IACjC,QAAA,IAAI,KAAK,CAAC,MAAM,KAAK,MAAM,CAAC,MAAM;IAAE,YAAA,OAAM;IAC1C,QAAA,IAAI,CAAC,CAAC,gBAAgB,EAAE,kBAAkB,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;gBACnE,OAAM;IACR,QAAA,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,KAAK,gBAAgB,EAAE;gBACxC,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CACxB,IAAI,CAAC,SAAS,CAAC;IACb,gBAAA,IAAI,EAAE,cAAc;oBACpB,MAAM,EAAE,MAAM,CAAC,MAAM;oBACrB,MAAM,EAAE,OAAO,CAAC,MAAM;oBACtB,MAAM,EAAE,MAAM,CAAC,MAAM;oBACrB,UAAU,EAAE,MAAM,CAAC,UAAU;oBAC7B,QAAQ,EAAE,MAAM,CAAC,QAAQ;IAC1B,aAAA,CAAC,CACH,CAAA;IACD,YAAA,CAAA,EAAA,GAAA,OAAO,CAAC,MAAM,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,CAAA;IACpD,SAAA;IAAM,aAAA,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,KAAK,kBAAkB,EAAE;IACjD,YAAA,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;IAC5B,SAAA;SACF,EACD,KAAK,CACN,CAAA;IACD,IAAA,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,MAAM,CAAA;QACnC,OAAO,cAAc,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,CAAA;IACtD;;;;;;;;"}